<?php
/**
 * BSS Commerce Co.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://bsscommerce.com/Bss-Commerce-License.txt
 *
 * @category   BSS
 * @package    Bss_CompanyAccount
 * @author     Extension Team
 * @copyright  Copyright (c) 2020 BSS Commerce Co. ( http://bsscommerce.com )
 * @license    http://bsscommerce.com/Bss-Commerce-License.txt
 */
namespace Bss\CompanyAccount\Model\ResourceModel;

use Magento\Customer\Model\ResourceModel\CustomerRepository;
use Magento\Framework\Exception\ValidatorException;
use Magento\Framework\Model\ResourceModel\Db\AbstractDb;

/**
 * Class SubUser
 *
 * @package Bss\CompanyAccount\Model\ResourceModel
 */
class SubUser extends AbstractDb
{
    const TABLE = 'bss_sub_user';
    const ID = 'sub_id';

    /**
     * @var \Magento\Store\Model\StoreManagerInterface
     */
    private $storeManager;
    /**
     * @var CustomerRepository
     */
    private $customerRepository;

    /**
     * SubUser constructor.
     *
     * @param \Magento\Store\Model\StoreManagerInterface $storeManager
     * @param CustomerRepository $customerRepository
     * @param \Magento\Framework\Model\ResourceModel\Db\Context $context
     * @param null $connectionName
     */
    public function __construct(
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        CustomerRepository $customerRepository,
        \Magento\Framework\Model\ResourceModel\Db\Context $context,
        $connectionName = null
    ) {
        $this->storeManager = $storeManager;
        $this->customerRepository = $customerRepository;
        parent::__construct($context, $connectionName);
    }

    /**
     * Initialize resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init(self::TABLE, self::ID);
    }

    protected function _beforeSave(\Magento\Framework\Model\AbstractModel $subUser)
    {
        /** @var \Bss\CompanyAccount\Api\Data\SubUserInterface $subUser */
        $customerId = $subUser->getCompanyCustomerId();
        $customer = $this->customerRepository->getById($customerId);
        dd($customer->getStoreId());
        if ($subUser->getStoreId() === null) {
            $customer->setStoreId($this->storeManager->getStore()->getId());
        }
        $customer->getGroupId();

        dd($customer->getStoreId());
        parent::_beforeSave($subUser);

        if ($subUser->getSubUserEmail()) {
            throw new ValidatorException(__('The sub-user email is missing. Enter and try again.'));
        }

        $connection = $this->getConnection();
        $bind = ['email' => $customer->getEmail()];

        $select = $connection->select()->from(
            'bss_sub_user',
            ['id']
        )->where(
            'email = :email'
        );
        dd();
        if ($customer->getSharingConfig()->isWebsiteScope()) {
            $bind['website_id'] = (int)$customer->getWebsiteId();
            $select->where('website_id = :website_id');
        }
        if ($customer->getId()) {
            $bind['entity_id'] = (int)$customer->getId();
            $select->where('entity_id != :entity_id');
        }

        $result = $connection->fetchOne($select, $bind);
        if ($result) {
            throw new AlreadyExistsException(
                __('A customer with the same email address already exists in an associated website.')
            );
        }
        dd($object->getData());
        return parent::_beforeSave($object); // TODO: Change the autogenerated stub
    }
}
